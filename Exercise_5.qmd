---
title: WEEK 5 EXERCISES 
author: Dimitri Chryssolouris
format: html
toc: True  # Enable Table of Contents
toc-depth: 3  # Optional: Set the depth of ToC (default is 3)
number-sections: true  # Optional: Number headings in the document
echo: True
bibliography: bibliography.bib
---


# Abstract {.unnumbered .unlisted}

This document contains the solutions to the exercises of week 5.


# Demo: R Functions

Up to now, we have used a variety of different functions designed by other developers. Sometimes we need to execute an operation multiple times, and most often it is reasonable to write a function to do so. Whenever you have copied and pasted a block of code more than twice, you should consider writing a function @wickham2024r.

The first step in writing a function, is picking a name and assigning <- function(){} to it.

```{r}
testfun <- function() {}
```


To run the function, we have to call the assigned name with the brackets. The function testfun gives no output, which is why we get NULL back.

```{r}
testfun()
```

```{r}
class(testfun)
```

To make the function actually do something, we need to specify what should be done within the curly brackets {}. The following function always prints the same statement and accepts no input values:

```{r}
testfun <- function() {
    print("this function does nothing")
}

testfun()
```

If we want the function to accept some input values, we have to define them within the round brackets. For example, I specify a variable named sometext and can call this variable within the execution.

```{r}
testfun <- function(sometext) {
    print(sometext)
}

testfun(sometext = "this function does slightly more, but still not much")
```

Let’s take a more practical example. Say we want a function that calculates our age if provided with the date of our birthday. We can use Sys.time() to provide today’s date and difftime() to calculate the time difference between today and our birthday.

```{r}
my_age_1 <- function(birthday, output_unit) {
    difftime(Sys.time(), birthday, units = output_unit)
}

my_age_1(birthday = "1992-07-17", output_unit = "days")
```


As we already know from using other functions, if we declare our variables in the order that we initially listed them, we do not need to specify the parameters (no need of birthday = and output_unit =).

```{r}
my_age_1("1992-07-17", "days")
```

If we want any of our parameters to have default value, we can assign an initial value to the parameter when declaring the variables within the round brackets.

```{r}
my_age_2 <- function(birthday, output_unit = "weeks") {
    difftime(Sys.time(), birthday, units = output_unit)
}

# if not stated otherwise, our function uses the unit "days"
my_age_2("1992-07-17")
```

```{r}
my_age_1("1992-07-17", "hours")
my_age_2("1992-07-17", "hours")
```

